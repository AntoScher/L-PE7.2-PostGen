import os
import sys
import logging
import time

sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from generators.text_gen_gg import GeminiPostGenerator
import config as conf

# –î–µ—Ç–∞–ª—å–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)


def test_basic_generation():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã Vertex AI"""
    logger.info("=== –¢–ï–°–¢ –ë–ê–ó–û–í–û–ô –ì–ï–ù–ï–†–ê–¶–ò–ò ===")

    try:
        import vertexai
        from vertexai.generative_models import GenerativeModel

        vertexai.init(project=conf.GCP_PROJECT_ID, location=conf.GCP_LOCATION)
        model = GenerativeModel("gemini-1.5-flash-001")

        start_time = time.time()
        response = model.generate_content("–û—Ç–≤–µ—Ç—å –æ–¥–Ω–∏–º —Å–ª–æ–≤–æ–º: –∫–∞–∫ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–ª–∏—Ü–∞ –§—Ä–∞–Ω—Ü–∏–∏?")
        duration = time.time() - start_time

        if response.text.strip().lower() == "–ø–∞—Ä–∏–∂":
            logger.info(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –û—Ç–≤–µ—Ç: {response.text} (–∑–∞ {duration:.2f} —Å–µ–∫)")
            return True
        else:
            logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –æ—Ç–≤–µ—Ç: {response.text}")
            return False

    except Exception as e:
        logger.exception("üî• –û—à–∏–±–∫–∞ –±–∞–∑–æ–≤–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
        return False


def test_text_generation():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
    logger.info("\n=== –¢–ï–°–¢ –ì–ï–ù–ï–†–ê–¢–û–†–ê –¢–ï–ö–°–¢–ê ===")

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
    try:
        logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è GeminiPostGenerator...")
        post_gen = GeminiPostGenerator(
            project_id=conf.GCP_PROJECT_ID,
            location=conf.GCP_LOCATION,
            tone="–ø–æ–∑–∏—Ç–∏–≤–Ω—ã–π –∏ –≤–µ—Å—ë–ª—ã–π",
            topic="–ù–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –∫—É—Ö–æ–Ω–Ω—ã—Ö –Ω–æ–∂–µ–π –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ ZeroKnifes"
        )
        logger.info("–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        logger.exception("‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–∞
    logger.info("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞...")
    start_time = time.time()
    post_text = post_gen.generate_post()
    duration = time.time() - start_time

    if post_text:
        logger.info(f"‚úÖ –£—Å–ø–µ—Ö! –¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ (—Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω –∑–∞ {duration:.2f} —Å–µ–∫):")
        logger.info(post_text)
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ –ø–æ—Å—Ç–∞")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    logger.info("\n–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    start_time = time.time()
    img_desc = post_gen.generate_post_image_description()
    duration = time.time() - start_time

    if img_desc:
        logger.info(f"‚úÖ –£—Å–ø–µ—Ö! –û–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∑–∞ {duration:.2f} —Å–µ–∫):")
        logger.info(img_desc)

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —è–∑—ã–∫–∞
        if all(ord(c) < 128 for c in img_desc):
            logger.info("‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ")
        else:
            logger.error("‚ùå –û—à–∏–±–∫–∞: –æ–ø–∏—Å–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
    else:
        logger.error("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ–ø–∏—Å–∞–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")


if __name__ == "__main__":
    logger.info("\n" + "=" * 50)
    logger.info("–ó–ê–ü–£–°–ö –¢–ï–°–¢–û–í –ì–ï–ù–ï–†–ê–¢–û–†–ê –¢–ï–ö–°–¢–ê")
    logger.info("=" * 50)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑–æ–≤–æ–π —Ä–∞–±–æ—Ç—ã Vertex AI
    if not test_basic_generation():
        logger.error("üî• –ë–∞–∑–æ–≤—ã–π —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω! –î–∞–ª—å–Ω–µ–π—à–∏–µ —Ç–µ—Å—Ç—ã –æ—Ç–º–µ–Ω–µ–Ω—ã.")
        exit(1)

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç
    test_text_generation()

    logger.info("\n" + "=" * 50)
    logger.info("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
    logger.info("=" * 50)